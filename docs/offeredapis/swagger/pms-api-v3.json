{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "A1 policy management API",
    "description" : "<h2>General</h2><p>The O-RAN Non-RT RIC Policy Management Service provides a REST API for managemecnt of A1 policies. <br/>The main tasks of the service are:</p><ul><li>A1 Policy creation, modification and deletion.</li><li>Monitoring and maintaining consistency of the SMO view of A1 policies and the Near-RT RICs</li><li>Maintaining a view of supported Near-RT RIC policy types</li><li>Supervision of using services (R-APPs). When a service is unavailable, its policies are removed.</li></ul><h2>APIs provided or defined by the service</h2><h3>A1 Policy Management</h3><p>This is an API for management of A1 Policies.</p><ul><li>A1 Policy retrieval, creation, modification and deletion.</li><li>Retrieval of supported A1 Policy types for a Near-RT RIC</li><li>Retrieval of status for existing A1 policies</li></ul><h3>Management of configuration</h3><p>API for updating and retrieval of the component configuration. Note that there other ways to maintain the configuration.</p><h3>Service callbacks</h3><p>These are endpoints that are invoked by this service. The callbacks are registered in this service at service registration.</p><h3>NearRT-RIC Repository</h3><p>This is an API that provides support for looking up a NearRT-RIC. Each A1 policy is targeted for one Near-RT RIC.</p><h3>Health Check</h3><p>API used for supervision of the PMS component.</p><h3>Service Registry and Supervision</h3><p>API used for registering services that uses PMS. Each A1 policy is optionally owned by a service. PMS can supervise each registered service by a heart-beat supervision and will automatically remove policies for unavailable services. Note that a service does not need to be registered in order to create A1 Policies. This is a feature that is optional to use.</p><h3>Authorization API</h3><p>API used for access control of A1 Policy access. If configured, an external authorization provider is requested to grant access to the A1 Policy type.</p>",
    "contact" : {
      "url" : "https://www.onap.org/",
      "email" : "discuss-list@onap.com"
    },
    "license" : {
      "name" : "Copyright (C) 2024 OpenInfra Foundation Europe. Licensed under the Apache License.",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version" : "1.0.0",
    "x-api-id" : "a31c510b-20e6-4a08-af16-368c44d7fba8",
    "x-audience" : "external-public"
  },
  "servers" : [ {
    "url" : "{apiRoot}/a1policymanagement/v1",
    "variables" : {
      "apiRoot" : {
        "description" : "This is the Host:Port or Address where the A1-Policy Management Service can be accessed",
        "default" : "https://example.com"
      }
    }
  } ],
  "tags" : [ {
    "name" : "A1 Policy Management",
    "description" : "API used to create polices, Policy Instances and get  them as individual using an ID or get all policies/Instances."
  }, {
    "name" : "NearRT-RIC Repository",
    "description" : "API used to get the NearRT-RIC for the managed element."
  }, {
    "name" : "Service Registry and Supervision",
    "description" : "API used to keep the service Alive with in the timeout period"
  }, {
    "name" : "Health Check",
    "description" : "API used to get the health status and statistics of this service"
  }, {
    "name" : "Service callbacks"
  }, {
    "name" : "Configuration",
    "description" : "API used to create or fetch the application configuration."
  } ],
  "paths" : {
    "/status" : {
      "get" : {
        "tags" : [ "Health Check" ],
        "description" : "Returns status and statistics of this service",
        "operationId" : "getStatus",
        "responses" : {
          "200" : {
            "description" : "OK- Service is living Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StatusInfo"
                },
                "examples" : {
                  "status_info" : {
                    "$ref" : "#/components/examples/StatusInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rics/ric" : {
      "get" : {
        "tags" : [ "NearRT-RIC Repository" ],
        "summary" : "Returns info for one Near-RT RIC",
        "description" : "Either a Near-RT RIC identity or a Managed Element identity can be specified.<br>The intention with Managed Element identity is the ID used in O1 for accessing the traffical element (such as the ID of CU).",
        "operationId" : "getRic",
        "parameters" : [ {
          "name" : "managedElementId",
          "in" : "query",
          "description" : "The identity of a Managed Element. If given, the Near-RT RIC managing the ME is returned.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ricId",
          "in" : "query",
          "description" : "The identity of a Near-RT RIC to get information for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Near-RT RIC is found OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RicInfo"
                },
                "examples" : {
                  "ric_info" : {
                    "$ref" : "#/components/examples/RicInfo"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/rics" : {
      "get" : {
        "tags" : [ "NearRT-RIC Repository" ],
        "summary" : "Query Near-RT RIC information",
        "description" : "The call returns all Near-RT RICs that supports a given policy type identity",
        "operationId" : "getRics",
        "parameters" : [ {
          "name" : "policyTypeId",
          "in" : "query",
          "description" : "The identity of a policy type. If given, all Near-RT RICs supporting the policy type are returned",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RicInfoList"
                },
                "examples" : {
                  "ric_info_list" : {
                    "$ref" : "#/components/examples/RicInfoList"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/policytypes" : {
      "get" : {
        "tags" : [ "A1 Policy Management" ],
        "description" : "Query policy type identities",
        "operationId" : "getPolicyTypes",
        "parameters" : [ {
          "name" : "nearRtRicId",
          "in" : "query",
          "description" : "Select types for the given Near-RT RIC identity.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "typeName",
          "in" : "query",
          "description" : "Select types with the given type name (type identity has the format <typename_version>)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "compatibleWithVersion",
          "in" : "query",
          "description" : "Select types that are compatible with the given version. This parameter is only applicable in conjunction with type_name. As an example version 1.9.1 is compatible with 1.0.0 but not the other way around. Matching types will be returned sorted in ascending order.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Policy Type IDs found Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyTypeInformation"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502" : {
            "description" : "Bad Gateway",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/policytypes/{policyTypeId}" : {
      "get" : {
        "tags" : [ "A1 Policy Management" ],
        "description" : "Returns a policy type definition",
        "operationId" : "getPolicyTypeDefinition",
        "parameters" : [ {
          "name" : "policyTypeId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - schema of the given policy type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyObject"
                },
                "examples" : {
                  "policyObject" : {
                    "$ref" : "#/components/examples/PolicyObject"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502" : {
            "description" : "Bad Gateway",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policyId}" : {
      "get" : {
        "tags" : [ "A1 Policy Management" ],
        "description" : "Returns a policy",
        "operationId" : "getPolicy",
        "parameters" : [ {
          "name" : "policyId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Policy found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyObject"
                },
                "examples" : {
                  "policyObject" : {
                    "$ref" : "#/components/examples/PolicyObject"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502" : {
            "description" : "Bad Gateway",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "A1 Policy Management" ],
        "description" : "update a policy",
        "operationId" : "putPolicy",
        "parameters" : [ {
          "name" : "policyId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolicyObject"
              },
              "examples" : {
                "policyObject" : {
                  "$ref" : "#/components/examples/PolicyObject"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK - Policy updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyObject"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "411" : {
            "description" : "Length Required",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "413" : {
            "description" : "Payload Too Large",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "415" : {
            "description" : "Unsupported Media Type",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "423" : {
            "description" : "Locked - HTTP Status code which can be used when the state is Locked",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInformation"
                },
                "example" : {
                  "status" : 423,
                  "title" : "Locked",
                  "detail" : "State is Locked in the  provided request."
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502" : {
            "description" : "Bad Gateway",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "A1 Policy Management" ],
        "summary" : "Delete a policy",
        "description" : "Deleting the policy using policyId.",
        "operationId" : "deletePolicy",
        "parameters" : [ {
          "name" : "policyId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The created A1 policy was deleted"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "423" : {
            "description" : "Locked - HTTP Status code which can be used when the state is Locked",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInformation"
                },
                "example" : {
                  "status" : 423,
                  "title" : "Locked",
                  "detail" : "State is Locked in the  provided request."
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502" : {
            "description" : "Bad Gateway",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/policies" : {
      "get" : {
        "tags" : [ "A1 Policy Management" ],
        "summary" : "Query policy identities",
        "description" : "Returns a list of A1 policies matching given search criteria. <br>If several query parameters are defined, the policies matching all conditions are returned.",
        "operationId" : "getPolicyIds",
        "parameters" : [ {
          "name" : "policyTypeId",
          "in" : "query",
          "description" : "Select policies of a given policy type identity.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "nearRtRicId",
          "in" : "query",
          "description" : "Select policies of a given Near-RT RIC identity.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "serviceId",
          "in" : "query",
          "description" : "Select policies owned by a given service.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "typeName",
          "in" : "query",
          "description" : "Select policies of types with the given type name (type identity has the format <typename_version>)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - Policy identities",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyInformation"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502" : {
            "description" : "Bad Gateway",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "A1 Policy Management" ],
        "description" : "To create A1 policies",
        "operationId" : "createPolicy",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PolicyObjectInformation"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Success case 201 created",
            "headers" : {
              "Location" : {
                "description" : "Contains the URI of the newly created resource",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyObjectInformation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406" : {
            "description" : "Not Acceptable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "423" : {
            "description" : "Locked - HTTP Status code which can be used when the state is Locked",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorInformation"
                },
                "example" : {
                  "status" : 423,
                  "title" : "Locked",
                  "detail" : "State is Locked in the  provided request."
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "502" : {
            "description" : "Bad Gateway",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/configuration" : {
      "get" : {
        "tags" : [ "Configuration" ],
        "description" : "Returns the contents of the application configuration",
        "operationId" : "getConfiguration",
        "responses" : {
          "200" : {
            "description" : "OK - Application configuration received",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Configuration" ],
        "description" : "Replace the current configuration file with the given configuration",
        "operationId" : "putConfiguration",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK - Configuration updated",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/void"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/services/{serviceId}/keepalive" : {
      "put" : {
        "tags" : [ "Service Registry and Supervision" ],
        "summary" : "Heartbeat indicates that the service is running",
        "description" : "A registered service should invoke this operation regularly to indicate that it is still alive. If a registered service fails to invoke this operation before the end of a timeout period the service will be deregistered and all its A1 policies wil be removed. (This timeout can be set or disabled when each service is initially registered)",
        "operationId" : "keepAliveService",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "OK - Service supervision timer refreshed, OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/services" : {
      "get" : {
        "tags" : [ "Service Registry and Supervision" ],
        "summary" : "Returns service information",
        "description" : "Either information about a registered service with given identity or all registered services are returned.",
        "operationId" : "getServices",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "query",
          "description" : "The identity of the service",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceStatusList"
                },
                "examples" : {
                  "service_status_list" : {
                    "$ref" : "#/components/examples/ServiceStatusList"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Service Registry and Supervision" ],
        "summary" : "Register a service",
        "description" : "Registering a service is needed to:<ul><li>Get callbacks about available NearRT RICs.</li><li>Activate supervision of the service. If a service is inactive, its policies will automatically be deleted.</li></ul>Policies can be created even if the service is not registerred. This is a feature which it is optional to use.",
        "operationId" : "putService",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceRegistrationInfo"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK - Service updated",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "201" : {
            "description" : "Created - Service created",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "callbacks" : {
          "RICStatus" : {
            "{$request.body#/callback_url}" : {
              "post" : {
                "tags" : [ "Service callbacks" ],
                "summary" : "Callback for Near-RT RIC status",
                "description" : "The URL to this call is registered at Service registration.",
                "operationId" : "serviceCallback",
                "requestBody" : {
                  "content" : {
                    "application/json" : {
                      "schema" : {
                        "$ref" : "#/components/schemas/ServiceCallbackInfo"
                      }
                    }
                  },
                  "required" : true
                },
                "responses" : {
                  "200" : {
                    "description" : "OK",
                    "content" : {
                      "application/json" : {
                        "schema" : {
                          "$ref" : "#/components/schemas/void"
                        }
                      }
                    }
                  },
                  "404" : {
                    "description" : "Not Found",
                    "content" : {
                      "application/problem+json" : {
                        "schema" : {
                          "$ref" : "#/components/schemas/ProblemDetails"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services/{serviceId}" : {
      "delete" : {
        "tags" : [ "Service Registry and Supervision" ],
        "description" : "Unregister a service",
        "operationId" : "deleteService",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "Accept",
          "in" : "header",
          "description" : "Specifies the content type that the client expects to receive in response to the request. Only application/json is allowed.",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "application/json"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content - Service unregistered",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "PolicyTypeInformation" : {
        "required" : [ "nearRtRicId", "policyTypeId" ],
        "type" : "object",
        "properties" : {
          "policyTypeId" : {
            "type" : "string",
            "description" : "Identity of the policy type"
          },
          "nearRtRicId" : {
            "$ref" : "#/components/schemas/NearRtRicId"
          }
        },
        "description" : "Available policy types and for each policy type identifier the Near-RT RIC identifiers of those Near-RT RICs that support the related A1 policy type"
      },
      "PolicyObjectInformation" : {
        "required" : [ "nearRtRicId", "policyObject", "policyTypeId" ],
        "type" : "object",
        "properties" : {
          "nearRtRicId" : {
            "type" : "string",
            "description" : "identity of the target Near-RT RIC",
            "example" : "Near-RT-Ric-ID"
          },
          "transient" : {
            "type" : "boolean",
            "description" : "if true, the policy is deleted at RIC restart. If false, its value is maintained by this service until explicitly deleted. Default false.",
            "nullable" : false,
            "default" : false
          },
          "policyId" : {
            "type" : "string",
            "description" : "identity of the Policy",
            "example" : "POLICY-ID"
          },
          "serviceId" : {
            "type" : "string",
            "description" : "the identity of the service owning the policy. This can be used to group the policies (it is possible to get all policies associated to a service). Note that the service does not need to be registered.",
            "example" : "rApp ID"
          },
          "policyObject" : {
            "$ref" : "#/components/schemas/PolicyObject"
          },
          "statusNotificationUri" : {
            "type" : "string",
            "description" : "Callback URI for policy status updates"
          },
          "policyTypeId" : {
            "type" : "string",
            "description" : "identity of the policy type",
            "example" : "ORAN_QOS_1.0.0(typeName_SemVersion)"
          }
        },
        "description" : "Information related to the creation of the policy"
      },
      "ErrorInformation" : {
        "type" : "object",
        "properties" : {
          "detail" : {
            "type" : "string",
            "description" : " A human-readable explanation specific to this occurrence of the problem.",
            "example" : "Policy type not found"
          },
          "title" : {
            "type" : "string",
            "description" : "A specific error name",
            "example" : "Not Found"
          },
          "status" : {
            "type" : "integer",
            "description" : "The HTTP status code generated by the origin server for this occurrence of the problem. ",
            "format" : "int32",
            "example" : 404
          }
        },
        "description" : "Problem as defined in https://tools.ietf.org/html/rfc7807"
      },
      "PolicyObject" : {
        "type" : "object",
        "description" : "Policy Object is a JSON representation of an A1 policy"
      },
      "void" : {
        "type" : "object",
        "description" : "Void/empty"
      },
      "StatusInfo" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "status text"
          }
        }
      },
      "AuthorizationResult" : {
        "required" : [ "result" ],
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "boolean",
            "description" : "If true, the access is granted"
          }
        },
        "description" : "Result of authorization",
        "example" : {
          "result" : true
        }
      },
      "RicInfo" : {
        "type" : "object",
        "properties" : {
          "ricId" : {
            "type" : "string",
            "description" : "identity of the Near-RT RIC"
          },
          "managedElementIds" : {
            "type" : "array",
            "description" : "O1 identities for managed entities",
            "items" : {
              "type" : "string",
              "description" : "O1 identities for managed entities"
            }
          },
          "state" : {
            "type" : "string",
            "description" : "Represents the states for a Near-RT RIC",
            "enum" : [ "UNAVAILABLE", "AVAILABLE", "SYNCHRONIZING", "CONSISTENCY_CHECK" ]
          },
          "policyTypeIds" : {
            "type" : "array",
            "description" : "supported policy types",
            "items" : {
              "type" : "string",
              "description" : "supported policy types"
            }
          }
        },
        "description" : "Information for a Near-RT RIC"
      },
      "ServiceRegistrationInfo" : {
        "required" : [ "serviceId" ],
        "type" : "object",
        "properties" : {
          "callbackUrl" : {
            "type" : "string",
            "description" : "callback for notifying of Near-RT RIC state changes"
          },
          "serviceId" : {
            "type" : "string",
            "description" : "identity of the service"
          },
          "keepAliveIntervalSeconds" : {
            "type" : "integer",
            "description" : "keep alive interval for the service. This is used to enable optional heartbeat supervision of the service. If set (> 0) the registered service should regularly invoke a 'keepalive' REST call. When a service fails to invoke this 'keepalive' call within the configured time, the service is considered unavailable. An unavailable service will be automatically deregistered and its policies will be deleted. Value 0 means timeout supervision is disabled.",
            "format" : "int64"
          }
        },
        "description" : "Information for one service"
      },
      "PolicyStatusInfo" : {
        "type" : "object",
        "properties" : {
          "lastModified" : {
            "type" : "string",
            "description" : "timestamp, last modification time"
          },
          "status" : {
            "type" : "object",
            "description" : "the Policy status"
          }
        },
        "description" : "Status for one A1-P Policy"
      },
      "ServiceStatus" : {
        "type" : "object",
        "properties" : {
          "callbackUrl" : {
            "type" : "string",
            "description" : "callback for notifying of RIC synchronization"
          },
          "serviceId" : {
            "type" : "string",
            "description" : "identity of the service"
          },
          "keepAliveIntervalSeconds" : {
            "type" : "integer",
            "description" : "policy keep alive timeout",
            "format" : "int64"
          },
          "timeSinceLastActivitySeconds" : {
            "type" : "integer",
            "description" : "time since last invocation by the service",
            "format" : "int64"
          }
        }
      },
      "RicInfoList" : {
        "type" : "object",
        "properties" : {
          "rics" : {
            "type" : "array",
            "description" : "List of Near-RT RIC information",
            "items" : {
              "$ref" : "#/components/schemas/RicInfo"
            }
          }
        },
        "description" : "List of Near-RT RIC information"
      },
      "input" : {
        "required" : [ "accessType", "authToken", "policyTypeId" ],
        "type" : "object",
        "properties" : {
          "accessType" : {
            "type" : "string",
            "description" : "Access type",
            "enum" : [ "READ", "WRITE", "DELETE" ]
          },
          "authToken" : {
            "type" : "string",
            "description" : "Authorization token"
          },
          "policyTypeId" : {
            "type" : "string",
            "description" : "Policy type identifier"
          }
        },
        "description" : "input"
      },
      "PolicyAuthorization" : {
        "required" : [ "input" ],
        "type" : "object",
        "properties" : {
          "input" : {
            "$ref" : "#/components/schemas/input"
          }
        },
        "description" : "Authorization request for A1 policy requests"
      },
      "NearRtRicId" : {
        "type" : "string",
        "description" : "Identity of the policy"
      },
      "PolicyInformation" : {
        "required" : [ "nearRtRicId", "policyId" ],
        "type" : "object",
        "properties" : {
          "policyId" : {
            "type" : "string",
            "description" : "Identity of the policy"
          },
          "nearRtRicId" : {
            "$ref" : "#/components/schemas/NearRtRicId"
          }
        },
        "description" : "Near-RT RIC identifiers where A1 policies exist and for each Near-RT RIC identifier the policy identifiers of those policies that exist in that Near-RT RIC"
      },
      "ServiceStatusList" : {
        "type" : "object",
        "properties" : {
          "serviceList" : {
            "type" : "array",
            "description" : "List of service information",
            "items" : {
              "$ref" : "#/components/schemas/ServiceStatus"
            }
          }
        }
      },
      "ServiceCallbackInfo" : {
        "required" : [ "eventType", "ricId" ],
        "type" : "object",
        "properties" : {
          "ricId" : {
            "type" : "string",
            "description" : "identity of a Near-RT RIC"
          },
          "eventType" : {
            "type" : "string",
            "description" : "values:\nAVAILABLE: the  Near-RT RIC has become available for A1 Policy management",
            "enum" : [ "AVAILABLE" ]
          }
        },
        "description" : "Information transferred as in Service callbacks (callback_url)"
      },
      "Link" : {
        "type" : "object",
        "properties" : {
          "templated" : {
            "type" : "boolean"
          },
          "href" : {
            "type" : "string"
          }
        }
      },
      "ProblemDetails" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "a URI reference according to IETF RFC 3986 that identifies the problem type"
          },
          "title" : {
            "type" : "string",
            "description" : "human-readable summary of the problem type"
          },
          "status" : {
            "type" : "number",
            "description" : "the HTTP status code"
          },
          "detail" : {
            "type" : "string",
            "description" : "human-readable explanation "
          },
          "instance" : {
            "type" : "string",
            "description" : "URI reference that identifies the specific occurrence of the problem"
          }
        },
        "description" : "A problem detail to carry details in an HTTP response according to RFC 7807"
      }
    },
    "responses" : {
      "400" : {
        "description" : "Bad Request",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "401" : {
        "description" : "Unauthorized",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "403" : {
        "description" : "Forbidden",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "404" : {
        "description" : "Not Found",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "405" : {
        "description" : "Method Not Allowed",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "406" : {
        "description" : "Not Acceptable",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "409" : {
        "description" : "Conflict",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "411" : {
        "description" : "Length Required",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "413" : {
        "description" : "Payload Too Large",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "415" : {
        "description" : "Unsupported Media Type",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "429" : {
        "description" : "Too Many Request",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal Server Error",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "502" : {
        "description" : "Bad Gateway",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "503" : {
        "description" : "Service Unavailable",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProblemDetails"
            }
          }
        }
      },
      "Locked" : {
        "description" : "Locked - HTTP Status code which can be used when the state is Locked",
        "content" : {
          "application/problem+json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorInformation"
            },
            "example" : {
              "status" : 423,
              "title" : "Locked",
              "detail" : "State is Locked in the  provided request."
            }
          }
        }
      }
    },
    "examples" : {
      "ServiceStatusList" : {
        "description" : "List of service information",
        "value" : {
          "serviceList" : [ {
            "callbackUrl" : "callbackUrl",
            "serviceId" : "serviceId",
            "keepAliveIntervalSeconds" : 0,
            "timeSinceLastActivitySeconds" : 6
          }, {
            "callbackUrl" : "callbackUrl",
            "serviceId" : "serviceId",
            "keepAliveIntervalSeconds" : 0,
            "timeSinceLastActivitySeconds" : 6
          } ]
        }
      },
      "PolicyStatusInfo" : {
        "description" : "Status for one A1-P Policy",
        "value" : {
          "lastModified" : "last_modified",
          "status" : {
            "value" : {
              "status" : "status"
            }
          }
        }
      },
      "StatusInfo" : {
        "value" : {
          "status" : "status"
        }
      },
      "RicInfo" : {
        "value" : {
          "ricId" : "ricId",
          "managedElementIds" : [ "managedElementId", "managedElementId" ],
          "state" : "UNAVAILABLE",
          "policyTypeIds" : [ "policyTypeId", "policyTypeId" ]
        }
      },
      "RicInfoList" : {
        "value" : {
          "rics" : [ {
            "ricId" : "ricId",
            "managedElementIds" : [ "managedElementId", "managedElementId" ],
            "state" : "UNAVAILABLE",
            "policyTypeIds" : [ "policyTypeId", "policyTypeId" ]
          }, {
            "ricId" : "ricId",
            "managedElementIds" : [ "managedElementId", "managedElementId" ],
            "state" : "UNAVAILABLE",
            "policyTypeIds" : [ "policyTypeId", "policyTypeId" ]
          } ]
        }
      },
      "PolicyObject" : {
        "value" : {
          "scope" : {
            "ueId" : {
              "guRanUeId" : {
                "globalGnbId" : {
                  "plmnId" : {
                    "mcc" : "123",
                    "mnc" : "45"
                  },
                  "gnbId" : {
                    "gnbIdLength" : 24,
                    "gnbIdValue" : 12345678
                  }
                },
                "RanUeId" : "a31c510b20e64a74"
              }
            },
            "groupId" : {
              "spId" : 123
            },
            "qosId" : {
              "5qI" : 1
            },
            "cellId" : {
              "plmnId" : {
                "mcc" : "123",
                "mnc" : "45"
              },
              "cId" : {
                "ncI" : 123
              }
            }
          },
          "qosObjectives" : {
            "gfbr" : 100,
            "mfbr" : 200,
            "priorityLevel" : 3,
            "pdb" : 50
          }
        }
      }
    }
  }
}